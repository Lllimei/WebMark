from celery import Celery
from glob import glob
import quantmark as qm
import os
import requests

app = Celery('benchmark', broker=os.getenv("BROKER_URL", 'pyamqp://guest@localhost//'))


@app.task(ignore_result=True)
def benchmark_task(molecule, circuit, optimizer_module, optimizer_method):
    if not molecule["transformation"]:
        molecule["transformation"] = None
    result = run_benchmark(molecule, circuit, optimizer_module, optimizer_method)
    requests.post(
        os.getenv("DJANGO_API_URL", "http://localhost:8000/handleResult"),
        data={'result': result}
    )
    remove_output_files()


def remove_output_files():
    """
    Remove output files generated by LibMark
    """

    files_to_remove = glob("*.out") + glob("*.clean") + glob("*.hdf5")

    for file in files_to_remove:
        try:
            os.remove(file)
        except IOError:
            print("Could not remove file:", file)


def run_benchmark(molecule, circuit, optimizer_module, optimizer_method):
    """
    Generate metrics
    """

    optimizer = qm.QMOptimizer(module=optimizer_module, method=optimizer_method)
    backend = qm.QMBackend(backend='qulacs')
    circuit = qm.circuit.circuit_from_string(circuit)
    molecule = qm.molecule.create(
        geometry=molecule["structure"],
        basis_set=molecule["basis_set"],
        active_orbitals=molecule["active_orbitals"],
        transformation=molecule["transformation"]
    )

    return qm.vqe_benchmark(
        molecule=molecule,
        circuit=circuit,
        optimizer=optimizer,
        backend=backend,
        repetitions=100
    )
